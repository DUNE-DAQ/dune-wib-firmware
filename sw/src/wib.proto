syntax = "proto3";

package wib;

import "google/protobuf/any.proto";

/***
   wib_server, the ZeroMQ REP server listening on port tcp 1234 of the WIB, 
   will respond only to Command messages encapsulating particular messages, 
   and will return one message in response.
   
   Any other content sent to wib_server will result in an empty reply.
***/

message Command {
    google.protobuf.Any cmd = 1;
}


/*** Valid `cmd` message options ***/

/** High level commands **/

// Executes a script, which is either 
//  - a file name or path to a file on the WIB (file=false) 
//  - bytes representing a script (file=true)
message Script {
    bytes script = 1; //file[name] on WIB or contents of local file
    bool file = 2; //interpret script as file[name]
    
    //replies Status
}

// Fill and readout the DAQ spy buffers on the WIB
message ReadDaqSpy {
    bool buf0 = 1; //read buffer 0 (FEMB0+FEMB1)
    bool buf1 = 2; //read buffer 1 (FEMB2+FEMB3)
    bool deframe = 3; //return deframed data if true, frames if false
    bool channels = 4; //if deframe is true, returns channels if true, uvx if false
    
    uint32 trigger_command = 5; // 0 for immediate software trigger, or nonzero for a TLU command code trigger
    uint32 trigger_rec_ticks = 6; // Time to record after TLU trigger in 4.15834 ns ticks (18 bit max)
    uint32 trigger_timeout_ms = 7; // Maximum time to wait for a TLU trigger in ms (32 bit max)
    
    //replies DaqSpy if deframe is false
    message DaqSpy {
        bytes buf0 = 1; //contents of spy buffer 0 (1MB)
        bytes buf1 = 2; //contents of spy buffer 1 (1MB)
        bool success = 3; //whether the wib's spy_buffer_full bits were set
    }

    //replies DaqSpy if deframe is true
    message DeframedDaqSpy {
        uint32 crate_num = 1; //crate number from last frame
        uint32 wib_num = 2; //wib_number from last frame
        uint32 num_samples = 4; //number of frames/samples deframed
        // an series of 4*128 (num_femb*num_channels) arrays of uint16 representing the 2D array samples[4][128][num_samples]
        bytes deframed_samples = 5;
        // a series of 2 (num_buffers) flat array of uint64 representing the 2D array timestamps[2][num_samples]
        bytes deframed_timestamps = 6; 
        bool success = 7; //whether the wib's spy_buffer_full bits were set
    }
}
 
// Configure FEMB power setting used in subsequent PowerWIB messages
message ConfigurePower {
    
    //Voltage settings for the FEMB power rails
    double dc2dc_o1 = 1;
    double dc2dc_o2 = 2;
    double dc2dc_o3 = 3;
    double dc2dc_o4 = 4;
    double ldo_a0= 5;
    double ldo_a1 = 6;
    
    //replies Status
}
 
// Turn power ON and OFF for the FEMBs
message PowerWIB {

    //True to turn on, False to turn off
    bool femb0 = 1;
    bool femb1 = 2;
    bool femb2 = 3;
    bool femb3 = 4;
    
    bool cold = 5; // True if front end is COLD (77k)
    
    // 0 = full power-on sequence with COLDADC reset in software
    // 1 = leave VDDD,VDDA off and no COLDADC reset (sync+reset driven externally)
    // 2 = program externally reset COLDADCs and turn VDDD,VDDA on 
    uint32 stage = 6; 
    
    //replies Status
} 

// Perform a full frontend configuration with settings for each FEMB
message ConfigureWIB {
    // Settings applied to all channels on a FEMB
    message ConfigureFEMB {
        bool enabled = 1; // Whether to program this FEMB and enable readout
        
        // LArASIC global
        bool test_cap = 2; // test capacitor enabled
        uint32 gain = 3; // 14, 25, 7.8, 4.7 mV/fC (0 - 3) NOTE: this mapping depends on LArASIC revision!
        uint32 peak_time = 4; // 1.0, 0.5, 3, 2 us (0 - 3) NOTE: this mapping depends on LArASIC revision!
        uint32 baseline = 5; // 0 (900 mV), 1 (200 mV), 2 (use APA mapping) NOTE: this mapping depends on LArASIC revision!
        uint32 pulse_dac = 6; // 6bit dac value
	bool gain_match = 14; // Enable pulser amplitude gain matching for LArASIC
        
        // LArASIC channel
        uint32 leak = 7; // 0 (500 pA), 1 (100 pA)
        bool leak_10x = 8; // multiply leak by 10 if true
        bool ac_couple = 9; // false (DC coupling), true (AC coupling)
        uint32 buffer = 10; // 0 (no buffer), 1 (se buffer), 2 (sedc buffer)
        
        // COLDATA calibration strobe
        uint32 strobe_skip = 11; // 2MHz periods to skip after strobe
        uint32 strobe_delay = 12; // offset from 2MHz to start strobe in 64MHz periods
        uint32 strobe_length = 13; // length of strobe in 64MHz periods
    }
    
    // To specify non-hardcoded values for COLDADC registers
    message ConfigureCOLDADC {
        uint32 reg_0 = 1;
        uint32 reg_4 = 2;
        uint32 reg_24 = 3;
        uint32 reg_25 = 4;
        uint32 reg_26 = 5;
        uint32 reg_27 = 6;
        uint32 reg_29 = 7;
        uint32 reg_30 = 8;
    }

    // Message for configuring WIB internal pulser and enabling connection to FEMBs
    message ConfigureWIBPulser {
    	repeated bool femb_en = 1; // must supply 4
    	uint32 pulse_dac = 2;
	uint32 pulse_period = 3;
	uint32 pulse_phase = 4;
	uint32 pulse_duration = 5;
    }

    repeated ConfigureFEMB fembs = 1; //must supply 4
    
    bool cold = 2; // True if front end is COLD (77k)
    
    bool pulser = 3; // True if pulser (and LArASIC sdacsw2) should be enabled
    
    bool adc_test_pattern = 4; // enable ADC test pattern
    
    ConfigureCOLDADC adc_conf = 5; // specify non-hardcoded values for COLDADC (omit for defaults)
    
    bool frame_dd = 6; // enable Frame-DD from COLDATA instead of Frame-14 data

    uint32 detector_type = 7; // 0 for WIB default, 1 for upper APA, 2 for lower APA, 3 for CRP

    ConfigureWIBPulser wib_pulser = 8; // Configuration message if using WIB internal pulser

    // Preset line driver configuration options
    // 0 for detector default, 1 for current-mode (short cable)
    // 2 for warm 25m cable, 3 for warm 35m, 4 for cold 25m, 5 for cold 25m
    repeated uint32 line_driver = 9;
    
    //replies Status
}


// Run the ADC calibration routine
message Calibrate {
    
    //replies Status
}

// Recompile the software currently loaded on the WIB
message Recompile {
    
    //replies Status
}


/** System control commands **/

// Deploy new root and boot archives to the WIB (send reboot after!)
message Update {
    bytes root_archive = 1; //tar.gz archive of root filesystem
    bytes boot_archive = 2; //tar.gz archive of boot filesystem
    
    //replies Status
}

// Reboot the WIB (after replying)
message Reboot {
    
    //replies Empty
}

/* Low level debug commands */

//peek wib memory
message Peek {
    uint64 addr = 1; //address in WIB memory
    
    //replies RegValue
}

//poke wib memory
message Poke {
    uint64 addr = 1; //address in WIB memory
    uint32 value = 2; //32 bit value 
    
    //replies RegValue
}

//peek coldata i2c bus
message CDPoke {
    uint32 femb_idx = 1; // which femb to address (0-3)
    uint32 coldata_idx = 2; // which coldata on femb to address (0-1)
    uint32 chip_addr = 3; // chip address to send over i2c
    uint32 reg_page = 4; // register page to send over i2c
    uint32 reg_addr = 5; // register address to send over i2c
    uint32 data = 6; // byte to write to i2c location (0-255)
    
    //replies CDRegValue
}

//poke coldata i2c bus
message CDPeek {
    uint32 femb_idx = 1; // which femb to address (0-3)
    uint32 coldata_idx = 2; // which coldata on femb to address (0-1)
    uint32 chip_addr = 3; // chip address to send over i2c
    uint32 reg_page = 4; // register page to send over i2c
    uint32 reg_addr = 5; // register address to send over i2c
    
    //replies CDRegValue
}

//fast command on all coldata chips
message CDFastCmd {
    uint32 cmd = 1; //hex value of fast command to send
    
    //replies Empty
}

/** CCM/SC/Monitoring commands **/

// reads data from the WIB onboard sensors
message GetSensors {

    //replies Sensors
    message Sensors {
    
        // 5V (before)
        // 5V
        // VCCPSPLL_Z_1P2V
        // PS_DDR4_VTT
        repeated double ltc2990_4e_voltages = 1;
        
        // 1.2 V (before)
        // 1.2 V
        // 3.3 V (before)
        // 3.3 V
        repeated double ltc2990_4c_voltages = 2;
        
        // In pairs (before,after)
        // 0.85 V
        // 0.9 V
        // 2.5 V
        // 1.8 V
        repeated double ltc2991_48_voltages = 3;
        
        // Onboard temperature sensors
        double ad7414_49_temp = 4;
        double ad7414_4d_temp = 5;
        double ad7414_4a_temp = 6;
        
        // 0x15 LTC2499 temperature sensor inputs from LTM4644 for FEMB 0 - 3 and WIB 1 - 3
        repeated double ltc2499_15_temps = 7;
        
        //DC2DC (4.22V,3.0V,2.5V,1.5V) in (before,after) 0.1ohm pairs for FEMB 0
        repeated double femb0_dc2dc_ltc2991_voltages = 8;
        
        //DC2DC (4.22V,3.0V,2.5V,1.5V) in (before,after) 0.1ohm pairs for FEMB 1
        repeated double femb1_dc2dc_ltc2991_voltages = 9;
        
        //DC2DC (4.22V,3.0V,2.5V,1.5V) in (before,after) 0.1ohm pairs for FEMB 2
        repeated double femb2_dc2dc_ltc2991_voltages = 10;
        
        //DC2DC (4.22V,3.0V,2.5V,1.5V) in (before,after) 0.1ohm pairs for FEMB 3
        repeated double femb3_dc2dc_ltc2991_voltages = 11;
        
        //LDO 2.5V femb 0-3 in (before after) 0.1ohm pairs for LDO A1
        repeated double femb_ldo_a0_ltc2991_voltages = 12;
        
        //LDO 2.5V femb 0-3 in (before after) 0.1ohm pairs for LDO A1
        repeated double femb_ldo_a1_ltc2991_voltages = 13;
        
        //BIAS 5V femb 0-3 in (before after) 0.1ohm pairs 
        repeated double femb_bias_ltc2991_voltages = 14;
    }
}

// reads the hardcoded firmware timestamp to verify firmware version
message GetTimestamp {
    
    message Timestamp {
        uint32 timestamp = 1;
        uint32 day = 2;
        uint32 month = 3;
        uint32 year = 4;
        uint32 hour = 5;
        uint32 min = 6;
        uint32 sec = 7;
    }
}

// reads the git version information built into the software
message GetSWVersion {
    
    message Version {
        string version = 1;
    }
}

// resets the timing endpoint
message ResetTiming {
    
    //replies GetTimingStatus.TimingStatus
}

// reads the status of the timing endpoint
message GetTimingStatus {

    //replies TimingStatus
    message TimingStatus {
        //SI5344 status register values
        uint32 lol_val = 1;
        uint32 lol_flg_val = 2;
        uint32 los_val = 3;
        uint32 los_flg_val = 4;
        //Firmware timing endpoint status register
        uint32 ept_status = 5;
    }
}

// sets the fake time generator start value
message SetFakeTime {
    uint64 time = 1;
    
    //replies Empty
}

// starts fake time generator (subject to network latency)
message StartFakeTime {
    
    //replies Empty
}

// reads the wib_server (or boot) log, optionally clearing the log
message LogControl {
    bool clear_log = 1; //clears log buffer
    bool return_log = 2; //returns contents of log since last clear if true
    bool boot_log = 3; //overrides return_log
    
    message Log {
        bytes contents = 1;
    }
}


/*** Generic Command Replies (not valid `cmd` options) ***/

// Nothing
message Empty {
}

// Success of command with optional extra info
message Status {
    bool success = 1;
    bytes extra = 2;
}

// 
message RegValue {
    uint64 addr = 1;
    uint32 value = 2;
}

message CDRegValue {
    uint32 femb_idx = 1;
    uint32 coldata_idx = 2;
    uint32 chip_addr = 3;
    uint32 reg_page = 4;
    uint32 reg_addr = 5;
    uint32 data = 6;
}
